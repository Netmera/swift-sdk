// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NetmeraLocation
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import Foundation
@_exported import NetmeraAnalytic
import NetmeraCore
@_exported import NetmeraLocation
import Swift
import Swinject
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CoreLocation.CLLocation {
  public func toSdkLocation() -> NetmeraCore.Location
}
public protocol LocationUpdateDelegate {
  func updateActiveLocation()
}
public protocol NetmeraLocationAuthorizationDelegate {
  func locationManagerDidChangeAuthorization(_ status: NetmeraLocation.NetmeraLocationAuthorizationStatus)
}
public protocol NetmeraLocationDelegate : CoreLocation.CLLocationManagerDelegate {
  func register(authorizationDelegate: any NetmeraLocation.NetmeraLocationAuthorizationDelegate)
  func register(regionDelegate: any NetmeraLocation.NetmeraLocationRegionDelegate)
}
public protocol NetmeraLocationRegionDelegate {
  func locationManager(didEnterRegion region: NetmeraLocation.NetmeraRegion)
  func locationManager(didExitRegion region: NetmeraLocation.NetmeraRegion)
}
public typealias NetmeraLocationAuthorizationStatus = CoreLocation.CLAuthorizationStatus
public typealias NetmeraCLLocation = CoreLocation.CLLocation
public typealias NetmeraRegion = CoreLocation.CLRegion
public typealias NetmeraLocationDistance = CoreLocation.CLLocationDistance
public protocol NetmeraLocationManager : AnyObject {
  func requestWhenInUseAuthorization()
  func requestLocation()
  var osLocation: NetmeraCore.Location { get }
  var delegate: (any CoreLocation.CLLocationManagerDelegate)? { get set }
  static func locationServicesEnabled() -> Swift.Bool
  func requestAlwaysAuthorization()
  var monitoredRegions: Swift.Set<NetmeraLocation.NetmeraRegion> { get }
  static func isMonitoringAvailable(for regionClass: Swift.AnyClass) -> Swift.Bool
  var maximumRegionMonitoringDistance: NetmeraLocation.NetmeraLocationDistance { get }
  func startMonitoring(for region: NetmeraLocation.NetmeraRegion)
  func stopMonitoring(for region: NetmeraLocation.NetmeraRegion)
  @available(iOS 14.0, *)
  var authorizationStatus: CoreLocation.CLAuthorizationStatus { get }
  @available(iOS, introduced: 4.2, deprecated: 14.0)
  static func authorizationStatus() -> CoreLocation.CLAuthorizationStatus
}
extension CoreLocation.CLLocationManager : NetmeraLocation.NetmeraLocationManager {
  public var osLocation: NetmeraCore.Location {
    get
  }
}
extension NetmeraCore.Netmera {
  public static func requestLocationAuthorization()
}
