// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NetmeraAnalytic
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation
@_exported import NetmeraAnalytic
@_exported import NetmeraCore
import Swift
import Swinject
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers open class NetmeraCartAddProductEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public var count: Swift.UInt?
  public var basketTotal: Swift.Double?
  public init(product: NetmeraAnalytic.NetmeraProduct, count: Swift.UInt? = nil, basketTotal: Swift.Double? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraWishListEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public var campaignId: Swift.String?
  public init(product: NetmeraAnalytic.NetmeraProduct, campaignId: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class NetmeraLinkClickEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  public var source: Swift.String?
  public var campaignId: Swift.String?
  public var campaignName: Swift.String?
  public var medium: Swift.String?
  public init(source: Swift.String? = nil, campaignId: Swift.String? = nil, campaignName: Swift.String? = nil, medium: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraLinkClickEvent, rhs: NetmeraAnalytic.NetmeraLinkClickEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraContent {
  final public let contentId: Swift.String
  final public let contentName: Swift.String
  final public let contentType: NetmeraAnalytic.NetmeraContentEventType
  public var categoryIds: [Swift.String]?
  public var categoryNames: [Swift.String]?
  public var provider: Swift.String?
  public var keywords: [Swift.String]?
  public init(contentId: Swift.String, contentName: Swift.String, contentType: NetmeraAnalytic.NetmeraContentEventType, categoryIds: [Swift.String]? = nil, categoryNames: [Swift.String]? = nil, provider: Swift.String? = nil, keywords: [Swift.String]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraProductRateEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public var rating: Swift.UInt?
  public init(product: NetmeraAnalytic.NetmeraProduct, rating: Swift.UInt? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraBatteryLevelEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var batteryLevel: Swift.Int?
  public init(batteryLevel: Swift.Int? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraBatteryLevelEvent, rhs: NetmeraAnalytic.NetmeraBatteryLevelEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraViewActionEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let code: Swift.String
  final public let actionType: NetmeraAnalytic.NetmeraUIActionType
  public init(code: Swift.String, actionType: NetmeraAnalytic.NetmeraUIActionType)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraViewActionEvent, rhs: NetmeraAnalytic.NetmeraViewActionEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraRegisterEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var userId: Swift.String?
  public init(userId: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraRegisterEvent, rhs: NetmeraAnalytic.NetmeraRegisterEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraProduct {
  final public let productId: Swift.String
  final public let productName: Swift.String
  final public let price: Swift.Double
  public var categoryIds: [Swift.String]?
  public var categoryNames: [Swift.String]?
  public var brandId: Swift.String?
  public var brandName: Swift.String?
  public var variant: Swift.String?
  public var keywords: [Swift.String]?
  public init(productId: Swift.String, productName: Swift.String, price: Swift.Double, categoryIds: [Swift.String]? = nil, categoryNames: [Swift.String]? = nil, brandId: Swift.String? = nil, brandName: Swift.String? = nil, variant: Swift.String? = nil, keywords: [Swift.String]? = nil)
  @objc deinit
}
open class NetmeraSearchEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var query: Swift.String?
  public var resultCount: Swift.Int?
  public init(query: Swift.String? = nil, resultCount: Swift.Int? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraSearchEvent, rhs: NetmeraAnalytic.NetmeraSearchEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraShowViewTestEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let path: Swift.String
  public init(path: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraShowViewTestEvent, rhs: NetmeraAnalytic.NetmeraShowViewTestEvent) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class NetmeraContentViewEvent : NetmeraAnalytic.NetmeraContentEvent {
  override open class var key: Swift.String {
    get
  }
  public init(content: NetmeraAnalytic.NetmeraContent)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraCartViewEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var subTotal: Swift.Double?
  public var itemCount: Swift.UInt?
  public init(subTotal: Swift.Double? = nil, itemCount: Swift.UInt? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraBannerClickEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var bannerId: Swift.String?
  public var keywords: [Swift.String]?
  public init(bannerId: Swift.String? = nil, keywords: [Swift.String]? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraBannerClickEvent, rhs: NetmeraAnalytic.NetmeraBannerClickEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraLocationUpdateEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  public var accuracy: Swift.Double?
  public var locationDate: Foundation.Date?
  public init(accuracy: Swift.Double? = nil, locationDate: Foundation.Date? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraLocationUpdateEvent, rhs: NetmeraAnalytic.NetmeraLocationUpdateEvent) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraContentEvent : NetmeraCore.NetmeraEvent {
  final public let contentId: Swift.String
  final public let contentName: Swift.String
  final public let contentType: NetmeraAnalytic.NetmeraContentEventType
  public var categoryIds: [Swift.String]?
  public var categoryNames: [Swift.String]?
  public var provider: Swift.String?
  public var keywords: [Swift.String]?
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraPurchaseEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var subTotal: Swift.Double
  public var grandTotal: Swift.Double
  public var lineItems: [NetmeraAnalytic.NetmeraLineItem]
  public var paymentMethod: Swift.String?
  public var shippingCost: Swift.Double?
  public var discount: Swift.Double?
  public var coupon: Swift.String?
  public var itemCount: Swift.Int {
    get
  }
  public var productCount: Swift.Int {
    get
  }
  public init(subTotal: Swift.Double, grandTotal: Swift.Double, lineItems: [NetmeraAnalytic.NetmeraLineItem], paymentMethod: Swift.String? = nil, shippingCost: Swift.Double? = nil, discount: Swift.Double? = nil, coupon: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraInAppPurchaseEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let productId: Swift.String?
  final public let productName: Swift.String?
  final public let price: Swift.Double?
  final public let categoryIds: [Swift.String]?
  final public let categoryNames: [Swift.String]?
  final public let count: Swift.Int?
  final public let keywords: [Swift.String]?
  final public let currency: Swift.String?
  public init(productId: Swift.String? = nil, productName: Swift.String? = nil, price: Swift.Double? = nil, categoryIds: [Swift.String]? = nil, categoryNames: [Swift.String]? = nil, count: Swift.Int? = nil, keywords: [Swift.String]? = nil, currency: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraInAppPurchaseEvent, rhs: NetmeraAnalytic.NetmeraInAppPurchaseEvent) -> Swift.Bool
  @objc deinit
}
extension NetmeraCore.Netmera {
  public static func send<T>(_ event: T) where T : NetmeraCore.NetmeraEvent
}
@_hasMissingDesignatedInitializers open class NetmeraProductEvent : NetmeraCore.NetmeraEvent {
  final public let productId: Swift.String
  final public let productName: Swift.String
  final public let price: Swift.Double
  public var categoryIds: [Swift.String]?
  public var categoryNames: [Swift.String]?
  public var brandId: Swift.String?
  public var brandName: Swift.String?
  public var variant: Swift.String?
  public var keywords: [Swift.String]?
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum NetmeraUIActionType : Swift.Int, Swift.Codable {
  case unknown
  case button
  case checkbox
  case picker
  case `switch`
  case text
  case segment
  case view
  case datePicker
  case slider
  case stepper
  case pageControl
  case tableView
  case collectionView
  public var shouldCaptureValue: Swift.Bool {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class NetmeraLoginEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var userId: Swift.String?
  public init(userId: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraLoginEvent, rhs: NetmeraAnalytic.NetmeraLoginEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraOrderCancelEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var subTotal: Swift.Double?
  public var grandTotal: Swift.Double?
  public var itemCount: Swift.UInt?
  public var paymentMethod: Swift.String?
  public init(subTotal: Swift.Double, grandTotal: Swift.Double? = nil, itemCount: Swift.UInt? = nil, paymentMethod: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraScreenViewEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let pageId: Swift.String
  final public let pageName: Swift.String?
  final public let referrerPageId: Swift.String?
  final public let referrerPageName: Swift.String?
  final public let timeInPage: Swift.Double?
  final public let keywords: [Swift.String]?
  final public let formInfo: [Swift.String : Swift.String]?
  public init(pageId: Swift.String, pageName: Swift.String? = nil, referrerPageId: Swift.String? = nil, referrerPageName: Swift.String? = nil, timeInPage: Swift.Double? = nil, keywords: [Swift.String]? = nil, formInfo: [Swift.String : Swift.String]? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraScreenViewEvent, rhs: NetmeraAnalytic.NetmeraScreenViewEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraShowViewEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let code: Swift.String
  public init(code: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraShowViewEvent, rhs: NetmeraAnalytic.NetmeraShowViewEvent) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraContentRateEvent : NetmeraAnalytic.NetmeraContentEvent {
  override open class var key: Swift.String {
    get
  }
  public var rating: Swift.UInt?
  public init(content: NetmeraAnalytic.NetmeraContent, rating: Swift.UInt? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraCartRemoveProductEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public var count: Swift.UInt?
  public init(product: NetmeraAnalytic.NetmeraProduct, count: Swift.UInt? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class NetmeraLocationAuthorizationEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  public var authorizationStatus: Swift.Int?
  public init(authorizationStatus: Swift.Int? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraLocationAuthorizationEvent, rhs: NetmeraAnalytic.NetmeraLocationAuthorizationEvent) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class NetmeraContentCommentEvent : NetmeraAnalytic.NetmeraContentEvent {
  override open class var key: Swift.String {
    get
  }
  public init(content: NetmeraAnalytic.NetmeraContent)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class NetmeraProductViewEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public init(product: NetmeraAnalytic.NetmeraProduct)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum GeofenceType : Swift.Int, Swift.Codable {
  case entered
  case exited
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class NetmeraGeofenceEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  override public var isLocationDataRequired: Swift.Bool {
    get
  }
  public var identifier: Swift.String?
  public var type: NetmeraAnalytic.GeofenceType?
  public init(identifier: Swift.String? = nil, type: NetmeraAnalytic.GeofenceType? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraGeofenceEvent, rhs: NetmeraAnalytic.NetmeraGeofenceEvent) -> Swift.Bool
  @objc deinit
}
open class NetmeraViewActionTestEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  final public let path: Swift.String
  final public let actionType: NetmeraAnalytic.NetmeraUIActionType
  public init(path: Swift.String, actionType: NetmeraAnalytic.NetmeraUIActionType)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraViewActionTestEvent, rhs: NetmeraAnalytic.NetmeraViewActionTestEvent) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class NetmeraProductCommentEvent : NetmeraAnalytic.NetmeraProductEvent {
  override open class var key: Swift.String {
    get
  }
  public init(product: NetmeraAnalytic.NetmeraProduct)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraShareEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var channel: Swift.String?
  public var content: Swift.String?
  public init(channel: Swift.String? = nil, content: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraShareEvent, rhs: NetmeraAnalytic.NetmeraShareEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraTimeInAppEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  final public let timeInAppSeconds: Swift.Double
  public init(timeInAppSeconds: Swift.Double)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraTimeInAppEvent, rhs: NetmeraAnalytic.NetmeraTimeInAppEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraLineItem : Swift.Codable {
  public var productId: Swift.String?
  public var productName: Swift.String?
  public var price: Swift.Double?
  public var count: Swift.Int
  public var campaignId: Swift.String?
  public init(productId: Swift.String? = nil, productName: Swift.String? = nil, price: Swift.Double? = nil, count: Swift.Int = .zero, campaignId: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
open class NetmeraCategoryViewEvent : NetmeraCore.NetmeraEvent {
  override open class var key: Swift.String {
    get
  }
  public var categoryId: Swift.String?
  public var categoryName: Swift.String?
  public init(categoryId: Swift.String? = nil, categoryName: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: NetmeraAnalytic.NetmeraCategoryViewEvent, rhs: NetmeraAnalytic.NetmeraCategoryViewEvent) -> Swift.Bool
  @objc deinit
}
public class NetmeraOpenAppEvent : NetmeraCore.NetmeraEvent {
  override public class var key: Swift.String {
    get
  }
  override public init()
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum NetmeraContentEventType : Swift.Int, Swift.Codable {
  case other
  case image
  case audio
  case video
  case text
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NetmeraAnalytic.NetmeraUIActionType : Swift.Equatable {}
extension NetmeraAnalytic.NetmeraUIActionType : Swift.Hashable {}
extension NetmeraAnalytic.NetmeraUIActionType : Swift.RawRepresentable {}
extension NetmeraAnalytic.GeofenceType : Swift.Equatable {}
extension NetmeraAnalytic.GeofenceType : Swift.Hashable {}
extension NetmeraAnalytic.GeofenceType : Swift.RawRepresentable {}
extension NetmeraAnalytic.NetmeraContentEventType : Swift.Equatable {}
extension NetmeraAnalytic.NetmeraContentEventType : Swift.Hashable {}
extension NetmeraAnalytic.NetmeraContentEventType : Swift.RawRepresentable {}
