// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NetmeraNotificationInbox
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation
import NetmeraAnalytic
import NetmeraCore
import NetmeraNotificationCore
@_exported import NetmeraNotificationInbox
import Swift
import Swinject
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NetmeraInboxManager {
  var objects: [NetmeraNotificationCore.NetmeraInboxPush] { get }
  func count(for status: NetmeraNotificationCore.NetmeraInboxStatus) -> Swift.Int
  func inbox(callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func nextPage(callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func updateStatus(_ status: NetmeraNotificationCore.NetmeraInboxStatus, for pushObjects: [NetmeraNotificationCore.NetmeraInboxPush], callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func updateStatusForAllPushObjects(_ status: NetmeraNotificationCore.NetmeraInboxStatus, callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func updateStatus(_ status: NetmeraNotificationCore.NetmeraInboxStatus, for categories: [Swift.String], callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func clear()
}
public struct NetmeraInboxCategoryObject : Swift.Codable {
  public let categoryName: Swift.String?
  public let statusCounts: [NetmeraNotificationCore.NetmeraInboxStatus : Swift.Int]
  public let lastMessage: NetmeraNotificationCore.NetmeraInboxPush?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func count(for status: NetmeraNotificationCore.NetmeraInboxStatus) -> Swift.Int
}
public enum NetmeraInboxError : Swift.Error, Swift.CustomStringConvertible {
  case noFilter
  case hasNoNextItems
  case requestError(description: Swift.String)
  case invalidParameter(description: Swift.String)
  public var description: Swift.String {
    get
  }
}
public protocol NetmeraInboxCategoryManager {
  var categories: [NetmeraNotificationInbox.NetmeraInboxCategoryObject] { get }
  func inboxCategory(callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func nextPage(callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func updateStatus(_ status: NetmeraNotificationCore.NetmeraInboxStatus, for categories: [Swift.String], callback: @escaping (Swift.Result<Swift.Bool, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
  func clear()
}
public struct NetmeraInboxFilter : Swift.Codable {
  public let status: NetmeraNotificationCore.NetmeraInboxStatus
  public let pageSize: Swift.Int
  public let shouldIncludeExpiredObjects: Swift.Bool
  public let categories: [Swift.String]?
  public init(status: NetmeraNotificationCore.NetmeraInboxStatus = .default, pageSize: Swift.Int = 10, shouldIncludeExpiredObjects: Swift.Bool = false, categories: [Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NetmeraInboxCountResponse : NetmeraCore.NetmeraResponse {
  override final public func encode(to encoder: any Swift.Encoder) throws
  final public func count(for status: NetmeraNotificationCore.NetmeraInboxStatus) -> Swift.Int
  @objc deinit
}
public struct NetmeraInboxCategoryFilter : Swift.Codable, Swift.CustomStringConvertible {
  public let status: NetmeraNotificationCore.NetmeraInboxStatus
  public let pageSize: Swift.Int
  public let shouldIncludeExpiredObjects: Swift.Bool
  public init(status: NetmeraNotificationCore.NetmeraInboxStatus = .default, pageSize: Swift.Int = 10, shouldIncludeExpiredObjects: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NetmeraInboxCountFilter : Swift.Codable {
  public let status: NetmeraNotificationCore.NetmeraInboxStatus
  public let shouldIncludeExpiredObjects: Swift.Bool
  public let categories: [Swift.String]?
  public init(status: NetmeraNotificationCore.NetmeraInboxStatus = .default, shouldIncludeExpiredObjects: Swift.Bool = false, categories: [Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NetmeraCore.Netmera {
  public static func inboxManager(with filter: NetmeraNotificationInbox.NetmeraInboxFilter) -> (any NetmeraNotificationInbox.NetmeraInboxManager)?
  public static func inboxCategoryManager(with filter: NetmeraNotificationInbox.NetmeraInboxCategoryFilter) -> (any NetmeraNotificationInbox.NetmeraInboxCategoryManager)?
  public static func fetchInboxCount(with filter: NetmeraNotificationInbox.NetmeraInboxCountFilter, callback: @escaping (Swift.Result<NetmeraNotificationInbox.NetmeraInboxCountResponse, NetmeraNotificationInbox.NetmeraInboxError>) -> Swift.Void)
}
public struct NetmeraInboxCategoryStatusObject : Swift.Codable {
  public let readCount: Swift.Int
  public let unreadCount: Swift.Int
  public let deletedCount: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
