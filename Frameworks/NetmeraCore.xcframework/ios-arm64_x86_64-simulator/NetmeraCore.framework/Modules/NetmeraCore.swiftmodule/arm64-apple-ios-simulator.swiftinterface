// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NetmeraCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CoreTelephony
import Foundation
@_exported import NetmeraCore
import OSLog
import SQLite3
import Security
import Swift
import Swinject
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
open class NetmeraPushPayload : Swift.Codable {
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol PlistManager {
  func read<T>(key: Swift.String, type: T.Type) -> Swift.Result<T, NetmeraCore.NetmeraPlistError> where T : Swift.Decodable
  func read<T>(key: Swift.String, type: T.Type, completion: @escaping (Swift.Result<T, NetmeraCore.NetmeraPlistError>) -> Swift.Void) where T : Swift.Decodable
}
@_hasMissingDesignatedInitializers public class InternalNetmera {
  public static func updateUserProfile(withDictionary dictionary: [Swift.String : Any], completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol DispatcherProvider {
  func io() -> any NetmeraCore.Dispatchable
  func ui() -> any NetmeraCore.Dispatchable
  func network() -> any NetmeraCore.Dispatchable
}
public struct NetmeraParams : Swift.Equatable, Swift.Codable {
  public let apiKey: Swift.String
  public let baseUrl: Swift.String?
  public let appGroupName: Swift.String?
  public let customEvents: [Swift.AnyClass]
  public init(apiKey: Swift.String, baseUrl: Swift.String? = nil, appGroupName: Swift.String? = nil, customEvents: [Swift.AnyClass] = [])
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: NetmeraCore.NetmeraParams, rhs: NetmeraCore.NetmeraParams) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
public enum NetmeraDownloadOption {
  case createIntermediateDirectories
  case removePreviousFile
  public static func == (a: NetmeraCore.NetmeraDownloadOption, b: NetmeraCore.NetmeraDownloadOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetmeraFetchCouponResponse : NetmeraCore.NetmeraResponse {
  final public let coupons: [NetmeraCore.NetmeraCouponObject]?
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol NetmeraCacheInvoke {
  func appendEventClasses(classes: [Swift.AnyClass])
  func appendRequestClasses(classes: [Swift.AnyClass])
  func isKnownEventClass(_ key: Swift.String) -> Swift.Bool
  func typeEventOf(_ key: Swift.String) -> Swift.AnyClass
  func isKnownRequestClass(_ key: Swift.String) -> Swift.Bool
  func typeRequestOf(_ key: Swift.String) -> Swift.AnyClass
  func appendSessionlessEventClasses(classes: [Swift.AnyClass])
  func isSessionlessEventClass(_ key: Swift.String) -> Swift.Bool
}
public protocol InitializerCache {
  func registerInitializer(initializer: any NetmeraCore.Initializer)
  func initializeAll()
  func deinitializeAll()
}
open class CoreProvider<T> {
  public init()
  open func provide() -> T
  @objc deinit
}
open class Statement<T> {
  public init(query: Swift.String)
  @objc deinit
}
public enum UserNotificationActionType : Swift.Int, Swift.Codable {
  case `default`
  case textInput
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ProxyCacheManager {
  func retainReferanceOn<T>(_ host: Any, value: T, key: Swift.UnsafeRawPointer)
  func referanceOn<T>(_ host: Any, key: Swift.UnsafeRawPointer) -> T?
  func clearReferenceOn(_ host: Any, withKey key: Swift.UnsafeRawPointer)
  func clearAllReferences(withKey key: Swift.UnsafeRawPointer)
  func getReferencesByHost(withKey key: Swift.UnsafeRawPointer) -> [(host: Swift.AnyObject, value: Swift.AnyObject)]
}
public protocol NetmeraPushPassthrough {
  func on(payload: [Swift.AnyHashable : Any])
}
@_hasMissingDesignatedInitializers open class Migration {
  @objc deinit
}
public struct NetmeraCouponObject : Swift.Codable, Swift.Equatable {
  public let couponId: Swift.String
  public let name: Swift.String
  public let code: Swift.String
  public let expireDate: Foundation.Date?
  public let assignDate: Foundation.Date?
  public static func == (a: NetmeraCore.NetmeraCouponObject, b: NetmeraCore.NetmeraCouponObject) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.CustomStringConvertible where Self : Swift.Decodable, Self : Swift.Encodable {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class Loader<T> {
  open func load(_: (T) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SyncLoader<T> {
  open func load() -> T
  @objc deinit
}
public enum NetmeraHTTPMethod : Swift.String {
  case connect
  case delete
  case get
  case head
  case options
  case patch
  case post
  case put
  case trace
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetmeraPushType : Swift.Int, Swift.Codable {
  case standart
  case interactive
  case popup
  case silent
  case ping
  case configUpdate
  case inAppMessage
  case recall
  case review
  case forceUpdate
  case widget
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Netmera {
  public static func initialize(params: NetmeraCore.NetmeraParams? = nil, logLevel: NetmeraCore.LogLevel? = nil, encryptor: (any NetmeraCore.NetmeraEncrypterProtocol)? = nil, initSessionCallback: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func initializeWithHoldingOperations(params: NetmeraCore.NetmeraParams? = nil, logLevel: NetmeraCore.LogLevel? = nil, encryptor: (any NetmeraCore.NetmeraEncrypterProtocol)? = nil, initSessionCallback: ((Swift.Bool) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Use identifyUser(_:) instead")
  public static func updateUser<T>(user: T) where T : NetmeraCore.NetmeraUser
  public static func identifyUser<T>(_ user: T, completion: ((Swift.Bool) -> Swift.Void)? = nil) where T : NetmeraCore.NetmeraUserIdentify
  public static func updateUserProfile<T>(userProfile: T, completion: ((Swift.Bool) -> Swift.Void)? = nil) where T : NetmeraCore.NetmeraUserProfile
  public static func setLogLevel(_ logLevel: NetmeraCore.LogLevel)
  public static func setEncryptor(_ encryptor: any NetmeraCore.NetmeraEncrypterProtocol)
  public static func setDataTransferEnabled(_ enabled: Swift.Bool)
  public static func isDataTransferEnabled() -> Swift.Bool
  public static func isNetmeraRemoteMessage(payload: [Swift.AnyHashable : Any]) -> Swift.Bool
  public static func getCurrentExternalId() -> Swift.String?
  public static func setEmailPermission(isAllowed: Swift.Bool)
  public static func getEmailPermission(callback: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  public static func setSmsPermission(isAllowed: Swift.Bool)
  public static func getSmsPermission(callback: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, renamed: "setEmailPermission(isAllowed:)")
  public static func setAllowedEmailSubscription(_ allowed: Swift.Bool)
  @available(*, deprecated, renamed: "getEmailPermission(callback:)")
  public static func isAllowedEmailSubscription() -> Swift.Bool
  public static func setAdditionalRequestHeaders(_ headers: [Swift.String : Swift.String])
  public static func startOperation()
  public static func kill()
  @available(iOS 13.0, tvOS 13.0, *)
  public static func handleConnectionOptions(_ options: UIKit.UIScene.ConnectionOptions)
  public static func fetchCoupons(using filter: NetmeraCore.NetmeraCouponFilter, callback: @escaping (Swift.Result<[NetmeraCore.NetmeraCouponObject], NetmeraCore.NetmeraFetchCouponError>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SqliteAdapter<T> {
  open func deserialzie(ptr _: Swift.OpaquePointer, index _: Swift.Int) -> T
  open func serialize(ptr _: Swift.OpaquePointer, index _: Swift.Int, value _: T) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Logger {
  public func log(_ messages: Any..., level: NetmeraCore.LogLevel = .debug, access: NetmeraCore.AccessLevel = .public, _ file: Foundation.NSString = #file)
  @objc deinit
}
public struct NetmeraTrackableActionInfo : Swift.Codable, Swift.Equatable {
  public let path: Swift.String
  public let code: Swift.String
  public let actionType: Swift.Int
  public static func == (lhs: NetmeraCore.NetmeraTrackableActionInfo, rhs: NetmeraCore.NetmeraTrackableActionInfo) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case path
    case code
    case actionType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
open class DelegateProxy<D> : ObjectiveC.NSObject where D : ObjectiveC.NSObjectProtocol {
  weak public var delegate: D?
  public init(delegate: D?)
  @objc override dynamic public func responds(to aSelector: ObjectiveC.Selector!) -> Swift.Bool
  @objc override dynamic public func forwardingTarget(for aSelector: ObjectiveC.Selector!) -> Any?
  @objc deinit
}
public struct NetmeraGeofenceEntity : Swift.Codable, Swift.Equatable {
  public static let empty: NetmeraCore.NetmeraGeofenceEntity
  public let id: Swift.String
  public let latitue: Swift.Double
  public let longitude: Swift.Double
  public let radius: Swift.Double
  public static func == (lhs: NetmeraCore.NetmeraGeofenceEntity, rhs: NetmeraCore.NetmeraGeofenceEntity) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class SerializerProvider<D, E> {
  public init(decoder _decoder: D, encoder _encoder: E)
  public func decoder() -> D
  public func encoder() -> E
  @objc deinit
}
public protocol NetmeraError : Swift.Error {
  var code: Swift.String { get }
}
public enum NetmeraCacheError : NetmeraCore.NetmeraError {
  case encode
  case decode
  case expired
  case notFound
  public var code: Swift.String {
    get
  }
  public static func == (a: NetmeraCore.NetmeraCacheError, b: NetmeraCore.NetmeraCacheError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetmeraPlistError : NetmeraCore.NetmeraError {
  case fileNotFound
  case decode
  case dataNotFound
  public var code: Swift.String {
    get
  }
  public static func == (a: NetmeraCore.NetmeraPlistError, b: NetmeraCore.NetmeraPlistError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetmeraRequestParams {
  case enableAdId(source: Swift.Int)
  case disableAdId(source: Swift.Int)
  case enablePush(source: Swift.Int)
  case disablePush(source: Swift.Int)
  case setEmailPermission(isAllowed: Swift.Bool)
  case setSmsPermission(isAllowed: Swift.Bool)
  case updateDevice(advertisingId: Swift.String)
  case registerDeviceToken(deviceToken: Swift.String)
  case fetchAppConfig
  case initSession(appConfigVersion: Swift.Int, deviceInfo: NetmeraCore.NetmeraDeviceInfo, isDataTransferDisabled: Swift.Bool)
  case identifyUser(user: NetmeraCore.NetmeraUserIdentify)
  case updateUser(user: NetmeraCore.NetmeraUser)
  case updateUserProfile(profileDictionary: [Swift.String : Any])
  case inboxCategories(filters: any Swift.Encodable)
  case inbox(filters: any Swift.Encodable)
  case inboxCount(filters: any Swift.Encodable)
  case setInboxStatus(inboxStatus: any Swift.Encodable)
  case getEmailPermission
  case getSmsPermission
  case getUserCategoryPreferenceList
  case setUserCategoryPreference(categoryPreference: any Swift.Encodable)
  case addTestDevice(deviceId: Swift.String)
  case fetchCoupon(filter: NetmeraCore.NetmeraCouponFilter)
}
extension NetmeraCore.DependencyResolver {
  public func register<T>(_: T)
  public func register<T>(_: T, named _: Swift.String)
}
@available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
open class NetmeraUser : Swift.Codable {
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($userId) public var userId: Swift.String? {
    get
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    set
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    _modify
  }
  public var $userId: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($email) public var email: Swift.String? {
    get
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    set
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    _modify
  }
  public var $email: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($msisdn) public var msisdn: Swift.String? {
    get
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    set
    @available(*, deprecated, message: "Use NetmeraUserIdentify and NetmeraUserProfile instead")
    _modify
  }
  public var $msisdn: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  public var name: Swift.String?
  public var surname: Swift.String?
  public var language: Swift.String?
  public var dateOfBirth: Foundation.Date?
  public var gender: NetmeraCore.NetmeraGender?
  public var maritalStatus: NetmeraCore.NetmeraMaritalStatus?
  public var numberOfChildren: Swift.Int?
  public var country: Swift.String?
  public var state: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var occupation: Swift.String?
  public var industry: Swift.String?
  public var favouriteTeam: Swift.String?
  public var externalSegments: [Swift.String]?
  public init()
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol DeviceTokenFormatter {
  func format(deviceToken: Foundation.Data) -> Swift.String
}
public protocol Module {
  func applyContainer(_ container: Swinject.Container)
  static func create() -> any NetmeraCore.Module
}
public protocol DictionaryDecoder {
  func decode<T>(_ type: T.Type, from json: [Swift.AnyHashable : Any]) throws -> T where T : Swift.Decodable
}
public protocol NetmeraEventConverter {
  func hasConverter(_ className: Swift.String) -> Swift.Bool
  func convert(_ dbCache: NetmeraCore.DbCache) -> NetmeraCore.NetmeraEvent?
}
open class NetmeraResponse : Swift.Codable {
  required public init(code: Swift.Int? = nil, error: Swift.String? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Bool {
  public func not() -> Swift.Bool
}
public enum LogLevel : Swift.Int, Swift.Comparable {
  case debug
  case info
  case error
  case fault
  public static func < (lhs: NetmeraCore.LogLevel, rhs: NetmeraCore.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class Factory<T> {
  public init()
  open func create() -> T
  @objc deinit
}
public struct NetmeraTrackableScreenInfo : Swift.Codable, Swift.Equatable {
  public let path: Swift.String
  public let code: Swift.String
  public static func == (lhs: NetmeraCore.NetmeraTrackableScreenInfo, rhs: NetmeraCore.NetmeraTrackableScreenInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class DataTransferStatusManager : NetmeraCore.DataTransferStatusManaging {
  final public func setDataTransferEnabled(_ enabled: Swift.Bool)
  final public func isDataTransferEnabled() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetmeraCoreModule : NetmeraCore.Module {
  public static func create() -> any NetmeraCore.Module
  public func applyContainer(_ container: Swinject.Container)
  @objc deinit
}
public protocol DependencyResolver {
  func resolve<T>() -> T?
  func resolve<T>(named: Swift.String) -> T?
  func resolveOrError<T>() -> T
  func resolveOrError<T>(named: Swift.String) -> T
  func register<T>(_ value: T)
  func register<T>(_ value: T, named: Swift.String)
}
@_hasMissingDesignatedInitializers public class NetmeraDeviceInfo : Swift.Codable, Swift.Equatable, Swift.CustomStringConvertible {
  public static func == (lhs: NetmeraCore.NetmeraDeviceInfo, rhs: NetmeraCore.NetmeraDeviceInfo) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
open class NetmeraEvent : Swift.Codable, Swift.Equatable {
  open class var key: Swift.String {
    get
  }
  public var locationString: Swift.String?
  public var revenue: Swift.Double?
  public var identifiers: NetmeraCore.NetmeraIdentifiers?
  open var isLocationDataRequired: Swift.Bool {
    get
  }
  public init()
  public init?(eventKey: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: NetmeraCore.NetmeraEvent, rhs: NetmeraCore.NetmeraEvent) -> Swift.Bool
  open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol UIApplicationProxyDelegate : AnyObject {
  @available(iOS 13.0, tvOS 13.0, *)
  var connectedScenes: Swift.Set<UIKit.UIScene> { get }
  var applicationIconBadgeNumber: Swift.Int { get set }
  var applicationState: UIKit.UIApplication.State { get }
  func registerForRemoteNotifications()
  func beginBackgroundTask()
  func endBackgroundTask()
  func open(_ url: Foundation.URL, options: [UIKit.UIApplication.OpenExternalURLOptionsKey : Any], completionHandler: ((Swift.Bool) -> Swift.Void)?)
  var resolver: any NetmeraCore.DependencyResolver { get }
}
extension NetmeraCore.NetmeraPushConverterProtocol {
  public func validateUserInfo(_ data: [Swift.AnyHashable : Any], for type: NetmeraCore.NetmeraPushType) -> Swift.Bool
}
@propertyWrapper public struct ExplicitlySet<Value> : Swift.Codable where Value : Swift.Decodable, Value : Swift.Encodable {
  public var isSet: Swift.Bool {
    get
  }
  public var wrappedValue: Value? {
    get
    set
  }
  public var projectedValue: NetmeraCore.ExplicitlySet<Value> {
    get
  }
  public init()
  public init(value: Value?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum NetmeraTrackingManagerAuthorizationStatus : Swift.UInt, Swift.Codable {
  case notDetermined
  case restricted
  case denied
  case authorized
  case undefined
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public protocol NetmeraSessionDataSender {
  func sendOpenAppEvent()
  func sendTimeInAppEvent(_ timeInAppSecs: Swift.Double)
}
final public class NetmeraUserIdentify {
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($userId) final public var userId: Swift.String? {
    get
    set
    _modify
  }
  final public var $userId: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($email) final public var email: Swift.String? {
    get
    set
    _modify
  }
  final public var $email: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  @NetmeraCore.ExplicitlySet @_projectedValueProperty($msisdn) final public var msisdn: Swift.String? {
    get
    set
    _modify
  }
  final public var $msisdn: NetmeraCore.ExplicitlySet<Swift.String> {
    get
  }
  public init()
  @objc deinit
}
public protocol WidgetUrlInterceptor {
  func proceed(_ url: Foundation.URL) -> Foundation.URL
}
public enum ApplicationState {
  case foreground
  case background
  case unknown
  public static func == (a: NetmeraCore.ApplicationState, b: NetmeraCore.ApplicationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetmeraFetchCouponError : Swift.Error, Swift.CustomStringConvertible {
  case requestError(description: Swift.String)
  public var description: Swift.String {
    get
  }
}
public protocol NetmeraCoreAnalyticDelegate {
  func sessionEvent(_ elapsed: Foundation.TimeInterval)
  func openAppEvent()
}
@_hasMissingDesignatedInitializers public class DbCache : Swift.Equatable {
  public static func == (lhs: NetmeraCore.DbCache, rhs: NetmeraCore.DbCache) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetmeraRequest : Swift.Codable, Swift.Equatable {
  public static func == (lhs: NetmeraCore.NetmeraRequest, rhs: NetmeraCore.NetmeraRequest) -> Swift.Bool
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum NetmeraGender : Swift.Int, Swift.Codable {
  case male
  case female
  case notSpecified
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class NetmeraAdvertisingInfo : Swift.Codable, Swift.Equatable {
  final public let authStatusForSystem: NetmeraCore.NetmeraTrackingManagerAuthorizationStatus
  final public let authStatusForApp: NetmeraCore.NetmeraTrackingManagerAuthorizationStatus
  final public let adId: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public static func empty() -> NetmeraCore.NetmeraAdvertisingInfo
  public static func == (lhs: NetmeraCore.NetmeraAdvertisingInfo, rhs: NetmeraCore.NetmeraAdvertisingInfo) -> Swift.Bool
  public func copy(authStatusForSystem: NetmeraCore.NetmeraTrackingManagerAuthorizationStatus? = nil, authStatusForApp: NetmeraCore.NetmeraTrackingManagerAuthorizationStatus? = nil, adId: Swift.String? = nil) -> NetmeraCore.NetmeraAdvertisingInfo
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct NetmeraCouponFilter : Swift.Codable, Swift.Equatable {
  public let page: Swift.Int
  public let max: Swift.Int
  public init(page: Swift.Int = 0, max: Swift.Int = 10)
  public static func == (a: NetmeraCore.NetmeraCouponFilter, b: NetmeraCore.NetmeraCouponFilter) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Bundle {
  public func infoValue<T>(for key: Swift.String, defaultValue: T) -> T
}
open class Factory2<I, T> {
  public init()
  open func create(_: I) -> T
  @objc deinit
}
public enum NetmeraUserNotificationActionActivationMode : Swift.Int, Swift.Codable {
  case background
  case foreground
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetmeraUserNotificationAction : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let title: Swift.String
  public let activationMode: NetmeraCore.NetmeraUserNotificationActionActivationMode
  public let destructive: Swift.Bool
  public let authenticationRequired: Swift.Bool
  public let behaviour: NetmeraCore.UserNotificationActionType
  public static func == (lhs: NetmeraCore.NetmeraUserNotificationAction, rhs: NetmeraCore.NetmeraUserNotificationAction) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol DataTransferStatusManaging {
  func setDataTransferEnabled(_ enabled: Swift.Bool)
  func isDataTransferEnabled() -> Swift.Bool
}
public enum AccessLevel : Swift.String {
  case `public`
  case `private`
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NetmeraIdentifiers : Swift.Codable, Swift.Equatable {
  public static let empty: NetmeraCore.NetmeraIdentifiers
  public static func == (lhs: NetmeraCore.NetmeraIdentifiers, rhs: NetmeraCore.NetmeraIdentifiers) -> Swift.Bool
  public func copy(installationId: Swift.String? = nil, deviceId: Swift.String? = nil, sessionId: Swift.String? = nil, userId: Swift.String? = nil, externalId: Swift.String? = nil, pushId: Swift.String? = nil, pushInstanceId: Swift.String? = nil, timeZoneId: Swift.String? = nil) -> NetmeraCore.NetmeraIdentifiers
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case installationId
    case deviceId
    case sessionId
    case userId
    case externalId
    case pushId
    case pushInstanceId
    case timeZoneId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class Variable<T> where T : Swift.Equatable {
  public var value: T {
    get
    set
  }
  public init(_ value: T)
  @objc deinit
  public func register(callback: NetmeraCore.Callback<T>)
  public func unregister(callback: NetmeraCore.Callback<T>)
  public func clearAll()
  public func dispatchValue(value: T)
}
public protocol DictionaryEncoder {
  func encode<T>(_ value: T) throws -> Any where T : Swift.Encodable
}
public typealias ReleasableDependencyResolver = NetmeraCore.DependencyResolver & NetmeraCore.Releasable
@_hasMissingDesignatedInitializers public class SwizzleHelper {
  public static func exchange(_ sourceClass: Swift.AnyClass?, _ sourceSelector: ObjectiveC.Selector, _ targetSelector: ObjectiveC.Selector)
  public static func exchange(_ sourceClass: Swift.AnyClass?, _ sourceSelector: ObjectiveC.Selector, _ targetClass: Swift.AnyClass?, _ targetSelector: ObjectiveC.Selector)
  public static func exchangeOrMakeNoOp(_ sourceClass: Swift.AnyClass?, _ sourceSelector: ObjectiveC.Selector, _ targetSelector: ObjectiveC.Selector, _ noOpIMP: ObjectiveC.IMP)
  @discardableResult
  public static func injectSelector(_ sourceClass: Swift.AnyClass, _ sourceSelector: ObjectiveC.Selector, _ targetClass: Swift.AnyClass, _ targetSelector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
public enum SDKState {
  case operating
  case onHold
  case killed
  public static func == (a: NetmeraCore.SDKState, b: NetmeraCore.SDKState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class NetmeraUserProfile : Swift.Codable {
  public var name: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var surname: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var externalSegments: NetmeraCore.NetmeraProfileAttribute<[Swift.String]>
  public var gender: NetmeraCore.NetmeraProfileAttribute<NetmeraCore.NetmeraGender>
  public var dateOfBirth: NetmeraCore.NetmeraProfileAttribute<Foundation.Date>
  public var maritalStatus: NetmeraCore.NetmeraProfileAttribute<NetmeraCore.NetmeraMaritalStatus>
  public var numberOfChildren: NetmeraCore.NetmeraProfileAttribute<Swift.Int>
  public var country: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var state: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var city: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var district: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var occupation: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var industry: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var favoriteTeam: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public var language: NetmeraCore.NetmeraProfileAttribute<Swift.String>
  public init()
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol NetmeraRequestSender : AnyObject {
  func enqueue(params: NetmeraCore.NetmeraRequestParams)
  func request<T>(params: NetmeraCore.NetmeraRequestParams, callback: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : NetmeraCore.NetmeraResponse
}
public protocol NetmeraDataSender {
  func sendEvent<T>(_ event: T) where T : NetmeraCore.NetmeraEvent
}
public enum NetmeraMaritalStatus : Swift.Int, Swift.Codable {
  case single
  case married
  case notSpecified
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol NetmeraPushConverterProtocol {
  func convert(_ userInfo: [Swift.AnyHashable : Any], _ serializerProvider: NetmeraCore.SerializerProvider<any NetmeraCore.DictionaryDecoder, any NetmeraCore.DictionaryEncoder>) -> NetmeraCore.NetmeraPush?
  func canConvert(_ userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
}
public struct NetmeraAppConfig : Swift.Codable {
  public static let empty: NetmeraCore.NetmeraAppConfig
  public let version: Swift.Int?
  public let applicationKey: Swift.String?
  public let shouldManageBadge: Swift.Bool?
  public let shouldSendLocationData: Swift.Bool?
  public let shouldSendAdvertisingId: Swift.Bool?
  public let shouldSendBatteryLevel: Swift.Bool?
  public let shouldSendScreenEvent: Swift.Bool?
  public let shouldSendInputFlow: Swift.Bool?
  public let shouldSendInputValue: Swift.Bool?
  public let shouldSendInAppPurchaseEvent: Swift.Bool?
  public let isTestUser: Swift.Bool?
  public let isTokenValid: Swift.Bool?
  public let batteryLevelLimit: Swift.Int?
  public let richPushTemplates: [Swift.String : Swift.String?]?
  public let interactiveCategories: [NetmeraCore.NetmeraUserNotificationCategory]?
  public let geofences: [NetmeraCore.NetmeraGeofenceEntity]?
  public let trackableScreens: [NetmeraCore.NetmeraTrackableScreenInfo]?
  public let trackableActions: [NetmeraCore.NetmeraTrackableActionInfo]?
  public var isValidatedAgainstRemote: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NetmeraCore.NetmeraAppConfig : Swift.Equatable {
  public static func == (lhs: NetmeraCore.NetmeraAppConfig, rhs: NetmeraCore.NetmeraAppConfig) -> Swift.Bool
}
public protocol PushInstanceParamsSetProtocol {
  func setPushParams(pushId: Swift.String?, pushInstanceId: Swift.String?)
}
public struct NetmeraUserNotificationCategory : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let interactiveActions: [NetmeraCore.NetmeraUserNotificationAction]
  public static func == (lhs: NetmeraCore.NetmeraUserNotificationCategory, rhs: NetmeraCore.NetmeraUserNotificationCategory) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class NetmeraPush : Swift.Codable {
  final public let pushType: NetmeraCore.NetmeraPushType
  public init(pushType: NetmeraCore.NetmeraPushType? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  open func encode(to encoder: any Swift.Encoder) throws
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case payload
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public enum PayloadInfoKeys : Swift.String, Swift.CodingKey {
    case pushType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public protocol Dispatchable : ObjectiveC.NSObject {
  func async(_ work: @escaping () -> Swift.Void)
  func asyncAfter(deadline: Dispatch.DispatchTime, work: @escaping () -> Swift.Void)
}
extension Dispatch.DispatchQueue : NetmeraCore.Dispatchable {
  public func asyncAfter(deadline: Dispatch.DispatchTime, work: @escaping () -> Swift.Void)
  public func async(_ work: @escaping () -> Swift.Void)
}
public protocol NetmeraDownloader {
  func download(_ url: Swift.String, options: [NetmeraCore.NetmeraDownloadOption], completion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void)
  func download(_ url: Swift.String, completion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void)
}
public struct Location : Swift.CustomStringConvertible, Swift.Equatable {
  public static let empty: NetmeraCore.Location
  public let lattitude: Swift.Double
  public let longitude: Swift.Double
  public let altitude: Swift.Double
  public let verticalAccuracy: Swift.Double
  public let horizontalAccuracy: Swift.Double
  public let timestamp: Foundation.Date
  public var description: Swift.String {
    get
  }
  public init(lattitude: Swift.Double, longitude: Swift.Double, altitude: Swift.Double, verticalAccuracy: Swift.Double, horizontalAccuracy: Swift.Double, timestamp: Foundation.Date)
  public static func == (lhs: NetmeraCore.Location, rhs: NetmeraCore.Location) -> Swift.Bool
}
public class SwizzlingForwarder {
  public init(target: Swift.AnyObject, yourSelector: ObjectiveC.Selector, originalSelector: ObjectiveC.Selector)
  public func invoke(withArgs args: [Any])
  @objc deinit
}
public protocol Initializer {
  func initialize()
  func deinitialize()
}
open class Callback<T> where T : Swift.Equatable {
  public init(callback: @escaping (T) -> Swift.Void)
  open func consume(value: T)
  @objc deinit
}
public enum TransparencyAuthorizationSource : Swift.Int {
  case system
  case app
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol CacheManager {
  func read<T>(key: Swift.String, type: T.Type) -> Swift.Result<T, NetmeraCore.NetmeraCacheError> where T : Swift.Decodable, T : Swift.Encodable
  func read<T>(key: Swift.String, type: T.Type, completion: @escaping (Swift.Result<T, NetmeraCore.NetmeraCacheError>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  func save<T>(key: Swift.String, value: T) -> Swift.Result<Swift.Void, NetmeraCore.NetmeraCacheError> where T : Swift.Decodable, T : Swift.Encodable
  func save<T>(key: Swift.String, value: T, completion: @escaping (Swift.Result<Swift.Void, NetmeraCore.NetmeraCacheError>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  func clearAllInvalidateableValues()
}
public protocol Releasable {
  func releaseInstance()
}
public protocol NetmeraEncrypterProtocol {
  func encrypt(value: Swift.String) -> Swift.String
}
public class NetmeraProfileAttribute<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public init()
  public func set(_ value: T)
  public func unset()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NetmeraCore.NetmeraProfileAttribute where T : Swift.ExpressibleByArrayLiteral {
  public func add(_ values: T)
  public func remove(_ values: T)
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ value: NetmeraCore.NetmeraProfileAttribute<T>, forKey key: K) throws where T : Swift.Decodable, T : Swift.Encodable
  public mutating func encodeIfPresent<T>(_ value: NetmeraCore.NetmeraProfileAttribute<T>?, forKey key: K) throws where T : Swift.Decodable, T : Swift.Encodable
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_: NetmeraCore.NetmeraProfileAttribute<T>.Type, forKey key: K) throws -> NetmeraCore.NetmeraProfileAttribute<T> where T : Swift.Decodable, T : Swift.Encodable
}
extension Swinject.Resolver {
  public func resolveOrError<Service>(_ serviceType: Service.Type) -> Service
  public func resolveOrError<Service>(_ serviceType: Service.Type, name: Swift.String) -> Service
}
extension NetmeraCore.NetmeraDownloadOption : Swift.Equatable {}
extension NetmeraCore.NetmeraDownloadOption : Swift.Hashable {}
extension NetmeraCore.UserNotificationActionType : Swift.Equatable {}
extension NetmeraCore.UserNotificationActionType : Swift.Hashable {}
extension NetmeraCore.UserNotificationActionType : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraHTTPMethod : Swift.Equatable {}
extension NetmeraCore.NetmeraHTTPMethod : Swift.Hashable {}
extension NetmeraCore.NetmeraHTTPMethod : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraPushType : Swift.Equatable {}
extension NetmeraCore.NetmeraPushType : Swift.Hashable {}
extension NetmeraCore.NetmeraPushType : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraTrackableActionInfo.CodingKeys : Swift.Equatable {}
extension NetmeraCore.NetmeraTrackableActionInfo.CodingKeys : Swift.Hashable {}
extension NetmeraCore.NetmeraTrackableActionInfo.CodingKeys : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraCacheError : Swift.Equatable {}
extension NetmeraCore.NetmeraCacheError : Swift.Hashable {}
extension NetmeraCore.NetmeraPlistError : Swift.Equatable {}
extension NetmeraCore.NetmeraPlistError : Swift.Hashable {}
extension NetmeraCore.LogLevel : Swift.Hashable {}
extension NetmeraCore.LogLevel : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraTrackingManagerAuthorizationStatus : Swift.Equatable {}
extension NetmeraCore.NetmeraTrackingManagerAuthorizationStatus : Swift.Hashable {}
extension NetmeraCore.NetmeraTrackingManagerAuthorizationStatus : Swift.RawRepresentable {}
extension NetmeraCore.ApplicationState : Swift.Equatable {}
extension NetmeraCore.ApplicationState : Swift.Hashable {}
extension NetmeraCore.NetmeraGender : Swift.Equatable {}
extension NetmeraCore.NetmeraGender : Swift.Hashable {}
extension NetmeraCore.NetmeraGender : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraUserNotificationActionActivationMode : Swift.Equatable {}
extension NetmeraCore.NetmeraUserNotificationActionActivationMode : Swift.Hashable {}
extension NetmeraCore.NetmeraUserNotificationActionActivationMode : Swift.RawRepresentable {}
extension NetmeraCore.AccessLevel : Swift.Equatable {}
extension NetmeraCore.AccessLevel : Swift.Hashable {}
extension NetmeraCore.AccessLevel : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraIdentifiers.CodingKeys : Swift.Equatable {}
extension NetmeraCore.NetmeraIdentifiers.CodingKeys : Swift.Hashable {}
extension NetmeraCore.NetmeraIdentifiers.CodingKeys : Swift.RawRepresentable {}
extension NetmeraCore.SDKState : Swift.Equatable {}
extension NetmeraCore.SDKState : Swift.Hashable {}
extension NetmeraCore.NetmeraMaritalStatus : Swift.Equatable {}
extension NetmeraCore.NetmeraMaritalStatus : Swift.Hashable {}
extension NetmeraCore.NetmeraMaritalStatus : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraPush.CodingKeys : Swift.Equatable {}
extension NetmeraCore.NetmeraPush.CodingKeys : Swift.Hashable {}
extension NetmeraCore.NetmeraPush.CodingKeys : Swift.RawRepresentable {}
extension NetmeraCore.NetmeraPush.PayloadInfoKeys : Swift.Equatable {}
extension NetmeraCore.NetmeraPush.PayloadInfoKeys : Swift.Hashable {}
extension NetmeraCore.NetmeraPush.PayloadInfoKeys : Swift.RawRepresentable {}
extension NetmeraCore.TransparencyAuthorizationSource : Swift.Equatable {}
extension NetmeraCore.TransparencyAuthorizationSource : Swift.Hashable {}
extension NetmeraCore.TransparencyAuthorizationSource : Swift.RawRepresentable {}
